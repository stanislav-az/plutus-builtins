
-- stack repl Hash.hs --package cryptonite --package bytestring --package memory
{-# LANGUAGE OverloadedStrings #-}

import qualified Crypto.Random as R
import qualified Data.ByteString as BS
import qualified Data.Bits as Bit
import Data.Foldable
import Data.Word
import qualified Data.ByteArray as BA
import qualified Crypto.Hash as H

genByteString :: IO BS.ByteString
genByteString = R.getRandomBytes 32

toBits :: BS.ByteString -> [Bool]
toBits = foldMap unpackWord . BS.unpack

fromBits :: [Bool] -> BS.ByteString
fromBits = BS.pack . fmap packWord . unw
  where
    unw words = case splitAt 8 words of
      ([], []) -> []
      (pre, []) -> [pre]
      (pre, rest) -> pre : unw rest

unpackWord :: Word8 -> [Bool]
unpackWord w = foldl' f [] [0..7]
  where
    f acc i =  Bit.testBit w i : acc

packWord :: [Bool] -> Word8
packWord bs = fromInteger $ foldr f 0 $ zip bs $ reverse [0..7]
  where
    f (b, i) acc = if b
                    then acc + 2 ^ i
                    else acc

convert :: H.Digest a -> BS.ByteString
convert = BA.convert

-- λ> convert $ H.hashWith H.SHA256 bs
-- "f\162\SOH\CAN\ACKX\142<\215\153T\v\171\t\156\204\US\EM=m\228\215lH\243\181\219V\211\138\251\ENQ"
-- λ> fromBits hashBits
-- "f\162\SOH\CAN\ACKX\142<\215\153T\v\171\t\156\204\US\EM=m\228\215lH\243\181\219V\211\138\251\ENQ"

bs :: BS.ByteString
bs = "CAn\b\184\a\173\240\DC4\NAK\145\241$\185\193\DC3\220\172\171\161\188I\204t\209\f\224\209|\DC2&g"

hashBits :: [Bool]
hashBits = [
    False,
    True,
    True,
    False,
    False,
    True,
    True,
    False,
    True,
    False,
    True,
    False,
    False,
    False,
    True,
    False,
    False,
    False,
    False,
    False,
    False,
    False,
    False,
    True,
    False,
    False,
    False,
    True,
    True,
    False,
    False,
    False,
    False,
    False,
    False,
    False,
    False,
    True,
    True,
    False,
    False,
    True,
    False,
    True,
    True,
    False,
    False,
    False,
    True,
    False,
    False,
    False,
    True,
    True,
    True,
    False,
    False,
    False,
    True,
    True,
    True,
    True,
    False,
    False,
    True,
    True,
    False,
    True,
    False,
    True,
    True,
    True,
    True,
    False,
    False,
    True,
    True,
    False,
    False,
    True,
    False,
    True,
    False,
    True,
    False,
    True,
    False,
    False,
    False,
    False,
    False,
    False,
    True,
    False,
    True,
    True,
    True,
    False,
    True,
    False,
    True,
    False,
    True,
    True,
    False,
    False,
    False,
    False,
    True,
    False,
    False,
    True,
    True,
    False,
    False,
    True,
    True,
    True,
    False,
    False,
    True,
    True,
    False,
    False,
    True,
    True,
    False,
    False,
    False,
    False,
    False,
    True,
    True,
    True,
    True,
    True,
    False,
    False,
    False,
    True,
    True,
    False,
    False,
    True,
    False,
    False,
    True,
    True,
    True,
    True,
    False,
    True,
    False,
    True,
    True,
    False,
    True,
    True,
    False,
    True,
    True,
    True,
    True,
    False,
    False,
    True,
    False,
    False,
    True,
    True,
    False,
    True,
    False,
    True,
    True,
    True,
    False,
    True,
    True,
    False,
    True,
    True,
    False,
    False,
    False,
    True,
    False,
    False,
    True,
    False,
    False,
    False,
    True,
    True,
    True,
    True,
    False,
    False,
    True,
    True,
    True,
    False,
    True,
    True,
    False,
    True,
    False,
    True,
    True,
    True,
    False,
    True,
    True,
    False,
    True,
    True,
    False,
    True,
    False,
    True,
    False,
    True,
    True,
    False,
    True,
    True,
    False,
    True,
    False,
    False,
    True,
    True,
    True,
    False,
    False,
    False,
    True,
    False,
    True,
    False,
    True,
    True,
    True,
    True,
    True,
    False,
    True,
    True,
    False,
    False,
    False,
    False,
    False,
    True,
    False,
    True
  ]
